{"ast":null,"code":"class SpmObject {\n  constructor() {\n    this.questions = new Set();\n    this.names = new Set();\n    this.totalQuestions = 0;\n    this.remainingQuestions = 0;\n  }\n  addSpm(spm) {\n    this.questions.add(spm);\n    this.remainingQuestions++;\n    this.totalQuestions++;\n  }\n  addName(name) {\n    this.names.add(name);\n  }\n  getSpm() {\n    this.remainingQuestions--;\n    let question = Array.from(this.questions)[Math.floor(Math.random() * this.questions.size)];\n    this.questions.delete(question);\n    if (this.remainingQuestions === 0) {\n      return \"Game Finished!\";\n    }\n    return question;\n  }\n  getNames() {\n    return this.names;\n  }\n  getNumPlayers() {\n    return this.names.size;\n  }\n  getNumQuestions() {\n    return this.totalQuestions;\n  }\n  getNumRemainingQuestions() {\n    return this.remainingQuestions;\n  }\n}\nclass Snusboks {\n  constructor() {\n    this.snus = new Map();\n  }\n  createRoom() {\n    let roomIds = this.snus.keys();\n    let max = 1;\n    for (let id of roomIds) {\n      if (id > max) {\n        console.log(id);\n        max = id;\n      }\n    }\n    let newRoomId = max + 1;\n    this.snus.set(newRoomId, new SpmObject());\n    return newRoomId;\n  }\n  addQuestion(id, question) {\n    this.snus.get(id).addSpm(question);\n  }\n  addPlayer(id, name) {\n    this.snus.get(id).addName(name);\n  }\n  getPlayers(id) {\n    return this.snus.get(id).getNames();\n  }\n  getQuestion(id) {\n    let playable = this.snus.get(id);\n    return playable.getSpm();\n  }\n  getNumQuestions(id) {\n    return this.snus.get(id).getNumQuestions();\n  }\n  getRemainingQuestions(id) {\n    return this.snus.get(id).getNumRemainingQuestions();\n  }\n}","map":{"version":3,"names":["SpmObject","constructor","questions","Set","names","totalQuestions","remainingQuestions","addSpm","spm","add","addName","name","getSpm","question","Array","from","Math","floor","random","size","delete","getNames","getNumPlayers","getNumQuestions","getNumRemainingQuestions","Snusboks","snus","Map","createRoom","roomIds","keys","max","id","console","log","newRoomId","set","addQuestion","get","addPlayer","getPlayers","getQuestion","playable","getRemainingQuestions"],"sources":["/Users/AmundFremming/Documents/Personlig/Koding/web-frontend/drikkelek/src/Util/Snusboks.js"],"sourcesContent":["class SpmObject {\n\n    constructor() {\n        this.questions = new Set();\n        this.names = new Set();\n        this.totalQuestions = 0;\n        this.remainingQuestions = 0;\n    }\n\n    addSpm(spm) {\n        this.questions.add(spm);\n        this.remainingQuestions++;\n        this.totalQuestions++;\n    }\n\n    addName(name) {\n        this.names.add(name);\n    }\n    \n    getSpm() {\n        this.remainingQuestions--;\n        let question = Array.from(this.questions)[Math.floor(Math.random() * this.questions.size)];\n        this.questions.delete(question);\n\n        if(this.remainingQuestions === 0) {\n            return \"Game Finished!\";\n        }\n        return question;\n    }\n\n    getNames() {\n        return this.names;\n    }\n\n    getNumPlayers() {\n        return this.names.size;\n    }\n\n    getNumQuestions() {\n        return this.totalQuestions;\n    }\n\n    getNumRemainingQuestions() {\n        return this.remainingQuestions;\n    }\n\n}\n\n\nclass Snusboks {\n\n    constructor() {\n        this.snus = new Map();\n    }\n\n    createRoom() {\n        let roomIds = this.snus.keys();\n        let max = 1;\n\n        for(let id of roomIds) {\n            if(id > max) {\n                console.log(id);\n                max = id;\n            }\n        }\n\n        let newRoomId = max + 1;\n        this.snus.set(newRoomId, new SpmObject());\n        return newRoomId\n    }\n    \n    addQuestion(id, question) {\n        this.snus.get(id).addSpm(question);\n    }\n    \n    addPlayer(id, name) {\n        this.snus.get(id).addName(name);\n    }\n\n    getPlayers(id) {\n        return this.snus.get(id).getNames();\n    }\n\n    getQuestion(id) {\n        let playable = this.snus.get(id);\n        return playable.getSpm();\n    }\n\n    getNumQuestions(id) {\n        return this.snus.get(id).getNumQuestions();\n    }\n\n    getRemainingQuestions(id) {\n        return this.snus.get(id).getNumRemainingQuestions();\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}